@page "/managementCustomers"
@using SimpleLibrarySystem.Data.Tables
@using SimpleLibrarySystem.Data.Services
@inject CustomerManagementService CustomerService
@inject IStringLocalizer<SimpleLibrarySystem.Resources.Translation> Localizer

<SimpleLibrarySystem.Pages.Modals.Modal_RemoveCustomer @ref="Modal"></SimpleLibrarySystem.Pages.Modals.Modal_RemoveCustomer>
<SimpleLibrarySystem.Pages.Modals.Modal_AddNewCustomer @ref="ModalAddCustomer"></SimpleLibrarySystem.Pages.Modals.Modal_AddNewCustomer>

@if (customers == null)
{
    <p><em>@Localizer["Loading"]</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        <button type="button" class="btn btn-primary" @onclick="() => ModalAddCustomer.Open()" >
                            @Localizer["AddNewCustomer"]
                        </button>
                    </th>
                </tr>
            </thead>
        </table>
    </div>
<div class="table-responsive">
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>@Localizer["CustomerName"]</th>
                    <th>@Localizer["CustomerVorname"]</th>
                    <th>@Localizer["CustomerPhoneNumber"]</th>
                    <th>@Localizer["CustomerEmail"]</th>
                    <th>@Localizer["CustomerAddress"]</th>
                    <th></th>
                </tr>
                <tr style="height: 30px; color:#FFFFFF;">
                    <td align="center">
                        <input class="form-control" type="text" placeholder="@Localizer["Filter"]" @bind="FilterID" @bind:event="oninput" />
                    </td>
                    <td align="center">
                        <input class="form-control" type="text" placeholder="@Localizer["Filter"]" @bind="FilterName" @bind:event="oninput" />
                    </td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
            </thead>
            <tbody>
                @{
                    filteredCustomers = customers.Where(e => (String.IsNullOrEmpty(FilterID) || e.CustomerID.Contains(FilterID, StringComparison.OrdinalIgnoreCase)) && (String.IsNullOrEmpty(FilterName) || e.Name.Contains(FilterName, StringComparison.OrdinalIgnoreCase))).ToList();
                }
                @for (int i = ((currentPage - 1) * itemsPerPage); i >= 0 && i < ((currentPage - 1) * itemsPerPage) + itemsPerPage && i < customers.Where(e => (String.IsNullOrEmpty(FilterID) || e.CustomerID.Contains(FilterID, StringComparison.OrdinalIgnoreCase)) && (String.IsNullOrEmpty(FilterName) || e.Name.Contains(FilterName, StringComparison.OrdinalIgnoreCase))).ToList().Count; i++)
                {
                    if (customers[i] != null)
                    {
                        Customer singleCustomer = filteredCustomers[i];
                        <tr>
                            <td>@singleCustomer.CustomerID</td>
                            <td>@singleCustomer.Name</td>
                            <td>@singleCustomer.Vorname</td>
                            <td>@singleCustomer.PhoneNumber</td>
                            <td>@singleCustomer.Email</td>
                            <td>@singleCustomer.Address</td>
                            <td>
                                <button class="btn btn-danger" style="width:100%;" @onclick="() => Modal.Open(singleCustomer)">
                                    @Localizer["Remove"]
                                </button>
                            </td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    </div>
</div>
    <div class="row justify-content-md-start">
        <button class="btn btn-pagination" @onclick="StartPage"><i class="oi oi-media-skip-backward"></i></button>
        <button class="btn btn-pagination" @onclick="PreviousPage"><i class="oi oi-media-step-backward"></i></button>
        <p class="p-modal-th">@currentPage @Localizer["PaginationOf"] @maxPage</p>
        <button class="btn btn-pagination" @onclick="NextPage"><i class="oi oi-media-step-forward"></i></button>
        <button class="btn btn-pagination" @onclick="LastPage"><i class="oi oi-media-skip-forward"></i></button>
    </div>
    }

    @code{
    private SimpleLibrarySystem.Pages.Modals.Modal_RemoveCustomer Modal { get; set; }
    private SimpleLibrarySystem.Pages.Modals.Modal_AddNewCustomer ModalAddCustomer { get; set; }

    private List<Customer> customers;
    private List<Customer> filteredCustomers;

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetCustomersListAsync();
        CalculatePages();

        CustomerService.Notify += OnNotify;
    }

    public async Task OnNotify(string s)
    {
        await InvokeAsync(() =>
        {
            ReloadCustomers();
            StateHasChanged();
        });
    }

    private async Task ReloadCustomers()
    {
        customers = await CustomerService.GetCustomersListAsync();
        CalculatePages();
    }

    //filters
    private string _FilterID;
    public string FilterID
    {
        get { return _FilterID; }
        set { _FilterID = value; CalculatePages(); currentPage = 1; }
    }

    private string _FilterName;
    public string FilterName
    {
        get { return _FilterName; }
        set { _FilterName = value; CalculatePages(); currentPage = 1; }
    }


    //pagination
    private int itemsPerPage = 10;
    private int currentPage = 1;
    private int maxPage = 1;

    private void StartPage()
    {
        currentPage = 1;
    }
    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }
    private void NextPage()
    {
        if (currentPage < maxPage)
            currentPage++;
    }
    private void LastPage()
    {
        currentPage = maxPage;
    }
    private void CalculatePages()
    {
        int count = customers.Where(e => (String.IsNullOrEmpty(FilterID) || e.CustomerID.Contains(FilterID, StringComparison.OrdinalIgnoreCase)) && (String.IsNullOrEmpty(FilterName) || e.Name.Contains(FilterName, StringComparison.OrdinalIgnoreCase))).ToList().Count;
        maxPage = (count / itemsPerPage);
        if (count % itemsPerPage > 0 || count == 0)
            maxPage += 1;

        if (currentPage > maxPage)
            currentPage = maxPage;
    }
    }
