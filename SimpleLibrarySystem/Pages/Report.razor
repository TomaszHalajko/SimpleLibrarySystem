@page "/report"
@using SimpleLibrarySystem.Data.Tables
@using SimpleLibrarySystem.Data.Services
@inject BooksManagementService BooksService
@inject IStringLocalizer<SimpleLibrarySystem.Resources.Translation> Localizer

<SimpleLibrarySystem.Pages.Modals.Modal_MoreInfoReport @ref="Modal"></SimpleLibrarySystem.Pages.Modals.Modal_MoreInfoReport>

@if (books == null)
{
    <p><em>@Localizer["Loading"]</em></p>
}
else
{
<h3 style="text-align:center">@Localizer["Report"]</h3>
<div style="margin: auto; border-style:solid; border-radius: 16px;">
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>@Localizer["BookID"]</th>
                    <th>@Localizer["BookTitle"]</th>
                    <th>@Localizer["BookAuthor"]</th>
                    <th>@Localizer["BookStatus"]</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (int i = ((currentPage - 1) * itemsPerPage); i >= 0 && i < ((currentPage - 1) * itemsPerPage) + itemsPerPage && i < books.Count; i++)
                {
                    Book singleBook = books[i];
                    if (singleBook != null)
                    {
                        Customer currentCustomer = singleBook.Borrowings.First().Customer;
                        <tr>
                            <td>@singleBook.BookID</td>
                            <td>@singleBook.Name</td>
                            <td>@singleBook.Author</td>
                            @*<td><a href="mailto:@currentCustomer.Email">@currentCustomer.Email</a></td>*@
                            @{
                                int days = (singleBook.Borrowings.First().EndDate - DateTime.UtcNow).Days;
                            }
                            @if (days >= 0)
                            {
                                <td><span class="td-daysleft-th">@days  @Localizer["DaysLeft"]</span></td>
                            }
                            else
                            {
                                <td><span class="td-dayslate-th">@Math.Abs(days) @Localizer["DaysLate"]</span></td>
                            }
                            <td>
                                <button class="btn btn-info" @onclick="() => Modal.Open(singleBook)"><i class="oi oi-info"></i></button>
                            </td>
                        </tr>
                    }
                }

            </tbody>
        </table>
    </div>
    <div class="row justify-content-md-start report-table-pagination">
        <button class="btn btn-pagination" @onclick="StartPage"><i class="oi oi-media-skip-backward"></i></button>
        <button class="btn btn-pagination" @onclick="PreviousPage"><i class="oi oi-media-step-backward"></i></button>
        <p class="p-modal-th">@currentPage @Localizer["PaginationOf"] @maxPage</p>
        <button class="btn btn-pagination" @onclick="NextPage"><i class="oi oi-media-step-forward"></i></button>
        <button class="btn btn-pagination" @onclick="LastPage"><i class="oi oi-media-skip-forward"></i></button>
    </div>
</div>
    
}

@code{
    private SimpleLibrarySystem.Pages.Modals.Modal_MoreInfoReport Modal { get; set; }
    private List<Book> books;

    protected override async Task OnInitializedAsync()
    {
        books = await BooksService.GetBooksListAsync();
        books = books.Where(e => e.Borrowings.Count > 0).ToList().OrderBy(e=> e.Borrowings.First().EndDate).ToList();
        CalculatePages();
    }

    //pagination
    private int itemsPerPage = 10;
    private int currentPage = 1;
    private int maxPage = 1;

    private void StartPage()
    {
        currentPage = 1;
    }
    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }
    private void NextPage()
    {
        if (currentPage < maxPage)
            currentPage++;
    }
    private void LastPage()
    {
        currentPage = maxPage;
    }
    private void CalculatePages()
    {
        int count = books.Count;
        maxPage = (count / itemsPerPage);
        if (count % itemsPerPage > 0 || count == 0)
            maxPage += 1;

        if (currentPage > maxPage)
            currentPage = maxPage;
    }
}