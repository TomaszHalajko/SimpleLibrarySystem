@page "/LibrarySystem"
@using SimpleLibrarySystem.Data.Tables
@using SimpleLibrarySystem.Data.Services
@inject BooksManagementService BooksService
@inject IStringLocalizer<SimpleLibrarySystem.Resources.Translation> Localizer

<SimpleLibrarySystem.Pages.Modals.Modal_BorrowBook @ref="Modal"></SimpleLibrarySystem.Pages.Modals.Modal_BorrowBook>
<SimpleLibrarySystem.Pages.Modals.Modal_ReturnBook @ref="ModalReturnBook"></SimpleLibrarySystem.Pages.Modals.Modal_ReturnBook>

@if (books == null)
{
    <p><em>@Localizer["Loading"]</em></p>
}
else
{
<h3>@Localizer["LibrarySystem"]</h3>
<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>@Localizer["BookTitle"]</th>
                <th>@Localizer["BookAuthor"]</th>
                <th>@Localizer["BookPublisher"]</th>
                <th>@Localizer["BookReleaseDate"]</th>
                <th>ISBN</th>
                <th>@Localizer["BookStatus"]</th>
                <th></th>
            </tr>
            <tr style="height: 30px; color:#FFFFFF;">
                <td></td>
                <td align="center">
                    <input class="form-control" type="text" placeholder="@Localizer["TitleFilter"]" @bind="FilterTitle" @bind:event="oninput" />
                </td>
                <td align="center">
                    <input class="form-control" type="text" placeholder="@Localizer["AuthorFilter"]" @bind="FilterAuthor" @bind:event="oninput" />
                </td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
            </tr>
        </thead>
        <tbody>
            @{
                filteredBooks = books.Where(e => (String.IsNullOrEmpty(FilterTitle) || e.Name.Contains(FilterTitle, StringComparison.OrdinalIgnoreCase)) && (String.IsNullOrEmpty(FilterAuthor) || e.Author.Contains(FilterAuthor, StringComparison.OrdinalIgnoreCase))).ToList();
            }
            @for (int i = ((currentPage - 1) * itemsPerPage); i >= 0 && i < ((currentPage - 1) * itemsPerPage) + itemsPerPage && i < books.Where(e => (String.IsNullOrEmpty(FilterTitle) || e.Name.Contains(FilterTitle, StringComparison.OrdinalIgnoreCase)) && (String.IsNullOrEmpty(FilterAuthor) || e.Author.Contains(FilterAuthor, StringComparison.OrdinalIgnoreCase))).ToList().Count; i++)
            {
                if (books[i] != null)
                {
                    Book singleBook = filteredBooks[i];
            <tr>
                <td>@singleBook.BookID</td>
                <td>@singleBook.Name</td>
                <td>@singleBook.Author</td>
                <td>@singleBook.Publisher</td>
                <td>@singleBook.ReleaseDate</td>
                <td>@singleBook.ISBN</td>
                @if (singleBook.Borrowings != null && singleBook.Borrowings.Count == 0)
                {
                <td>@Localizer["Available"]</td>
                <td>
                    <button class="btn btn-primary" style="width:100%;" @onclick="() => Modal.Open(singleBook)">
                        @Localizer["BorrowIt"]
                    </button>
                </td>
                }
                else
                {
                <td>@Localizer["BorrowedUntil"] @singleBook.Borrowings.First().EndDate.ToString("d")</td>
                <td>
                    <button class="btn btn-secondary" style="width:100%;" @onclick="() => ModalReturnBook.Open(singleBook)">
                        @Localizer["ReturnIt"]
                    </button>
                </td>
                }

            </tr>
                }
            }

        </tbody>
    </table>
</div>
    <div class="row justify-content-md-start report-table-pagination">
        <button class="btn btn-pagination" @onclick="StartPage"><i class="oi oi-media-skip-backward"></i></button>
        <button class="btn btn-pagination" @onclick="PreviousPage"><i class="oi oi-media-step-backward"></i></button>
        <p class="p-modal-th">@currentPage @Localizer["PaginationOf"] @maxPage</p>
        <button class="btn btn-pagination" @onclick="NextPage"><i class="oi oi-media-step-forward"></i></button>
        <button class="btn btn-pagination" @onclick="LastPage"><i class="oi oi-media-skip-forward"></i></button>
    </div>
    }

    @code{
    private SimpleLibrarySystem.Pages.Modals.Modal_BorrowBook Modal { get; set; }
    private SimpleLibrarySystem.Pages.Modals.Modal_ReturnBook ModalReturnBook { get; set; }

    private List<Book> books;
    private List<Book> filteredBooks;

    protected override async Task OnInitializedAsync()
    {
        books = await BooksService.GetBooksListAsync();
        CalculatePages();

        BooksService.Notify += OnNotify;
    }

    public async Task OnNotify(string s)
    {
        await InvokeAsync(() =>
        {
            ReloadBooks();
            StateHasChanged();
        });
    }

    private async Task ReloadBooks()
    {
        books = await BooksService.GetBooksListAsync();
    }

    //filters
    private string _FilterTitle;
    public string FilterTitle
    {
        get { return _FilterTitle; }
        set { _FilterTitle = value; CalculatePages(); currentPage = 1; }
    }

    private string _FilterAuthor;
    public string FilterAuthor
    {
        get { return _FilterAuthor; }
        set { _FilterAuthor = value; CalculatePages(); currentPage = 1; }
    }


    //pagination
    private int itemsPerPage = 10;
    private int currentPage = 1;
    private int maxPage = 1;

    private void StartPage()
    {
        currentPage = 1;
    }
    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }
    private void NextPage()
    {
        if (currentPage < maxPage)
            currentPage++;
    }
    private void LastPage()
    {
        currentPage = maxPage;
    }
    private void CalculatePages()
    {
        int count = books.Where(e => (String.IsNullOrEmpty(FilterTitle) || e.Name.Contains(FilterTitle, StringComparison.OrdinalIgnoreCase)) && (String.IsNullOrEmpty(FilterAuthor) || e.Author.Contains(FilterAuthor, StringComparison.OrdinalIgnoreCase))).ToList().Count;
        maxPage = (count / itemsPerPage);
        if (count % itemsPerPage > 0 || count == 0)
            maxPage += 1;

        if (currentPage > maxPage)
            currentPage = maxPage;
    }
    }
